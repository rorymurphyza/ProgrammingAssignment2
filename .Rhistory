datalist
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
colnames(datalist)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
datalist
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist
datalist <- complete(workspace, 1:2)
datalist\
datalist
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
datalist
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1:2)
temp
datalist
datalist <- complete(workspace, 1)
datalist
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist <- complete(workspace, 1)
datalist
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
datalist
datalist <- complete(workspace, 1)
datalist
datalist <- complete(workspace, 1:2)
datalist
datalist <- complete(workspace, c(2,4,8,10,12))
datalist
datalist <- complete(workspace, 30:25)
datalist
complete(workspace, 3)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/complete.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
complete(workspace, 3)
rm(datalist)
temp <- corr(workspace, 0)
temp
?cor
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
temp <- corr(workspace, 0)
temp
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
rm(completeindex, temp, i, count\)
rm(completeindex, temp, i, count)
singledf<-corr(workspace, 150)
class(singledf)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
singledf<-corr(workspace, 150)
class(singledf)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
strippeddf <- corr(workspace, 150)
length(strippeddf)
size(strippeddf)
dim(strip.custom())
dim(strippeddf
)
dim(strippeddf)[1]
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
strippeddf <- corr(workspace, 150)
strippeddf <- corr(workspace, 100)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
strippeddf <- corr(workspace, 150)
x <- strippeddf[2]
y <- strippeddf[3]
cor(x,y)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
correlations <- corr(workspace, 150)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
correlations <- corr(workspace, 150)
head(corr())
head(correlations
)
summary(correlations)
cr <- corr(workspace, 400)
head(cr)
summary(cr)
cr <- corr(workspace, 5000)
summary(cr)
summary(cor(0,0)
)
summary(cor(1,1))
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
cr <- corr(workspace, 5000)
summary(cr)
summary(cor(0,0,use="complete.obs","method=kendall"))
summary(cor(0,0,use="complete.obs", method="kendall"))
summary(cor(numeric(0),use="complete.obs", method="kendall"))
summary(cor(numeric(0),numeric(0),use="complete.obs", method="kendall"))
length(cr_)
length(cr)
cr <- corr(workspace)
summary(cr)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
cr <- corr(workspace)
summary(cr)
length(cr)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
cr <- corr(workspace)
summary(cr)
cr <- corr(workspace, 5000)
cr
summary(cr)
if(cr == 0)
print("zero")
if(cr == 0) {print "zero"}
cr == 0
is.logical(cr)
cr <- corr(workspace)
is.logical(cr)
debugSource('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
cr <- corr(workspace, 5000)
smmart(cr)
summary(cr)
cr <- corr(workspace, 150)
head(cr)
summart(cr)
summary(cr)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/corr.R')
pollutantmean(workspace, "sulfate", 1:10)
ans <- pollutantmean(workspace, "sulfate", 1:10)
ans
df
source('~/RWorkspace/R Programming - Coursera/Assignment 1/pollutantmean.R')
pollutantmean(workspace, "sulfate", 1:10)
pollutantmean(workspace, "nitrate", 70:72)
pollutantmean(workspace, "sulfate", 34.)
pollutantmean(workspace, "sulfate", 34)
pollutantmean(workspace, "nitrate")
cc <- complete(workspace, c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete(workspace, 54)
print(cc$nobs)
set.seed(42)
cc <-  complete(workspace, 332:1)
use <-sample(332,10)
prints(cc[use, "nobs"])
print(cc[use, "nobs"])
cr <- corr(workspace)
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr, 5))] ,4)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr(workspace, 129)
cr <- sort(cr)
n<-length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr(workspace, 2000)
n <- length(cr)
cr <- corr(workspace, 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
swirl
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character((cls_list))
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
class(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
mean(iris$Sepal.Length)
sub <- subset(iris, iris$Species)
class(iris)
sub <- iris[iris$Species == 'virginica']
sub <- iris[iris$Species == 'virginica',]
sub
mean(sub$Sepal.Length)
temp <- apply(iris,1,mean)
temp <- apply(iris[1,1:4],2,mean)
class(temp)
colMean(iris)
colMeans(iris)
temp <- apply(iris[,1:4], 1, mean)
temp <- apply(iris, 2, mean)
temp <- rowMeans(iris[,1:4])
library(datasets)
data("mtcars")
?mtcars
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mycars,2,mean)
apply(mtcars,2,mean)
head(mtcars)
avehp4 <- mean(mtcars[mtcars$cyl == '4'])
avehp4 <- mean(mtcars[mtcars$cyl == 'cyl'])
hp4cyl <- mtcars[mycars$cyl == 'cyl']
hp4cyl <- mtcars[mtcars$cyl == 'cyl']
hp4cyl <- mtcars[mtcars$cyl == '4']
hp4cyl <- mtcars[mtcars$cyl == 4]
hp4cyl <- mtcars[mtcars$cyl == '4']
hp4cyl <- mtcars[mtcars$cyl == '4',]
hp4cyl
avehp4 <- mean(hp4cyl$hp)
hp8cyl <- mtcars[mt$cars == '8',]
hp8cyl <- mtcars[mtcars$cyl == '8',]
ave8hp <- mean(hp8cyl$hp)
ave8hp-avehp4
127
debug(ls)
ls
ls
exit
0
0
bye()
c
undebug(ls)
q
ls
undebug(ls)
ls
ave8hp
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
makeVector()
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
makeVector()
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cachemean.R')
cachemean()
cachemean(5)
cachemean(c(1,2,3))
source('~/RWorkspace/R Programming - Coursera/Assignment 1/plusFunctions.R')
a <- plusfunctions()
a$plustwo(5)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cachemean.R')
x <- cachemean(3)
vec = c(2,3,4)
cachemean(vec)
vec = as.data.frame(vec)
cachemean(vec)
a
rm(a)
rm(vec)
vec <- c(1:10)
mean(vec)
vec <- c(0:10)
mean(vec)
x <- makeVector(vec)
cachemean(x)
cachemean(x)
cachemean(x)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cachemean.R')
cachemean(x)
x <- c(0:10)
cachemean(x)
m <- cachemean(x)
m <- makeVector(x)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cachemean.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeVector.R')
makeVector()
vec = c(0:10)
m <- cachemean(vec)
sets <- makeVector()
m <- cachemean(vec)
m <- sets$cachemean(vec)
sets$set(vec)
sets$get()
sets$setmean(mean(vec))
sets$getmean()
m <- cachemean(sets)
m
a <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3, byrow = FALSE)
a
a <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3, byrow = TRUE)
a
a[2,3]
dim(a)
solve(a)
a <- matrix(c(1,0,5,2,1,6,3,4,0), nrow=3,ncol=3,byrow=FALSE)
a
solve(a)
b<-solve(a)
a*b
a%%b
(1*-24) + (2*20) + (3*-5)
a%b
a%%b
b%%a
a%*%b
solve(a) %*% a == diag(nrow = nrow(a), ncol = ncol(a))
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeCacheMatrix.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeCacheMatrix.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeCacheMatrix.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeCacheMatrix.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve3
cacheSolve(3)
a
dim(a)[1]
dim(a)[2]
dim(a)[1] == dim(a)[2]
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
test <- matrix(1:6,nrow=2,ncol=3)
test
cacheSolve(test)
cacheSolve(a)
cacheSolve(a)
fun <- makeCacheMatrix(a)
fun$getMatrix()
cacheSolve(fun)
cacheSolve(fun$getMatrix())
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun$getMatrix())
cacheSolve(fun)
fun
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
fun$getMatrix()
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun)
a == a
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
fun <- makeCacheMatrix(a)
cacheSolve(fun, a)
fun$setMatrix(NULL)
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeCacheMatrix.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
a == a
fun <- makeCacheMatrix(a)
fun$getMatrix()
fun$setMatrix(NULL)
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/makeCacheMatrix.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
fun$setMatrix(NULL)
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
fun$setMatrix(NULL)
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
t <- a==a
t
all(t)
t[2,2] = FALSE
t
all(t)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
cacheSolve(fun, a)
source('~/RWorkspace/R Programming - Coursera/Assignment 1/cacheSolve.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
View(cacheSolve)
View(cachemean)
View(cachemean)
rm(fun, m, sets, vec, cachemean, cacheSolve, makeCacheMatrix
)
rm(t, test, makeVector)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
func <- makeCacheMatrix()
cacheSolve(func)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(func)
cacheSolve(func, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(func, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(func, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(func, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(func, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
fun <- makeCacheMatrix()
fun$get()
cacheSolve(fun)
cacheSolve(fun, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(fun, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(fun, a)
View(makeCacheMatrix)
rm(cacheSolve, makeCacheMatrix()
)
rm(cacheSolve, makeCacheMatrix
)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(fun, a)
source('~/GitHub/R-Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(fun, a)
setwd("~/GitHub/R-Programming/ProgrammingAssignment2")
cacheSolve(fun, a)
